// <auto-generated />
using System;
using AssetTracking2;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AssetTracking2.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20220605093505_seedingAssetData")]
    partial class seedingAssetData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AssetTracking2.Asset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OfficeId")
                        .HasColumnType("int");

                    b.Property<double>("PriceUSD")
                        .HasColumnType("float");

                    b.Property<DateTime>("Purchasedate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OfficeId");

                    b.ToTable("Assets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Brand = "iPhone",
                            Model = "8",
                            OfficeId = 2,
                            PriceUSD = 970.0,
                            Purchasedate = new DateTime(2019, 11, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "Mobile Phone"
                        },
                        new
                        {
                            Id = 2,
                            Brand = "HP",
                            Model = "Elitebook",
                            OfficeId = 2,
                            PriceUSD = 1423.0,
                            Purchasedate = new DateTime(2022, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "Laptop Computer"
                        },
                        new
                        {
                            Id = 3,
                            Brand = "iPhone",
                            Model = "11",
                            OfficeId = 2,
                            PriceUSD = 990.0,
                            Purchasedate = new DateTime(2022, 4, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "Mobile Phone"
                        },
                        new
                        {
                            Id = 4,
                            Brand = "iPhone",
                            Model = "X",
                            OfficeId = 1,
                            PriceUSD = 1245.0,
                            Purchasedate = new DateTime(2019, 8, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "Mobile Phone"
                        },
                        new
                        {
                            Id = 5,
                            Brand = "Motorola",
                            Model = "Razr",
                            OfficeId = 1,
                            PriceUSD = 970.0,
                            Purchasedate = new DateTime(2019, 9, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "Mobile Phone"
                        },
                        new
                        {
                            Id = 6,
                            Brand = "HP",
                            Model = "Elitebook",
                            OfficeId = 1,
                            PriceUSD = 588.0,
                            Purchasedate = new DateTime(2019, 10, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "Laptop Computer"
                        },
                        new
                        {
                            Id = 7,
                            Brand = "Asus",
                            Model = "W234",
                            OfficeId = 3,
                            PriceUSD = 1200.0,
                            Purchasedate = new DateTime(2019, 7, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "Laptop Computer"
                        },
                        new
                        {
                            Id = 8,
                            Brand = "Lenovo",
                            Model = "Yoga 730",
                            OfficeId = 3,
                            PriceUSD = 835.0,
                            Purchasedate = new DateTime(2019, 9, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "Laptop Computer"
                        },
                        new
                        {
                            Id = 9,
                            Brand = "Lenovo",
                            Model = "Yoga 530",
                            OfficeId = 3,
                            PriceUSD = 1030.0,
                            Purchasedate = new DateTime(2019, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "Laptop Computer"
                        },
                        new
                        {
                            Id = 10,
                            Brand = "Samsung",
                            Model = "Galaxy",
                            OfficeId = 3,
                            PriceUSD = 1170.0,
                            Purchasedate = new DateTime(2020, 6, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "Mobile Phone"
                        });
                });

            modelBuilder.Entity("AssetTracking2.Office", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Offices");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Country = "Sweden",
                            Currency = "SEK"
                        },
                        new
                        {
                            Id = 2,
                            Country = "Spain",
                            Currency = "EUR"
                        },
                        new
                        {
                            Id = 3,
                            Country = "USA",
                            Currency = "USD"
                        });
                });

            modelBuilder.Entity("AssetTracking2.Asset", b =>
                {
                    b.HasOne("AssetTracking2.Office", "Office")
                        .WithMany()
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Office");
                });
#pragma warning restore 612, 618
        }
    }
}
